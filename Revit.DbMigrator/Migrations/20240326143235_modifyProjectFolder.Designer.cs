// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Revit.EntityFrameworkCore;

#nullable disable

namespace Revit.DbMigrator.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240326143235_modifyProjectFolder")]
    partial class modifyProjectFolder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Revit.Entity.Permissions.R_Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ApiMethod")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("API方法：GET、PUT、POST、DELETE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("权限编码");

                    b.Property<string>("Component")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Vue页面组件");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("图标");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasComment("最后编辑时间");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("权限名称");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasComment("父菜单Id");

                    b.Property<int>("PermissionType")
                        .HasColumnType("int")
                        .HasComment("菜单类型,0：菜单权限、元素权限、Api权限、数据权限");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("备注");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("状态，0：禁用，1：正常");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Url地址");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("Sort");

                    b.ToTable("R_Permission");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApiMethod = "",
                            Code = "system",
                            Component = "",
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5375),
                            CreatorId = 0L,
                            Icon = "el-icon-s-tools",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5388),
                            Name = "系统管理",
                            ParentId = 0L,
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1,
                            Url = "system"
                        },
                        new
                        {
                            Id = 2L,
                            ApiMethod = "",
                            Code = "system.user",
                            Component = "views/documentation/index",
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5398),
                            CreatorId = 0L,
                            Icon = "el-icon-user-solid",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5399),
                            Name = "用户管理",
                            ParentId = 1L,
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1,
                            Url = "system.user"
                        },
                        new
                        {
                            Id = 3L,
                            ApiMethod = "",
                            Code = "system.role",
                            Component = "views/documentation/index",
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5402),
                            CreatorId = 0L,
                            Icon = "peoples",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5403),
                            Name = "角色管理",
                            ParentId = 1L,
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1,
                            Url = "role"
                        },
                        new
                        {
                            Id = 4L,
                            ApiMethod = "",
                            Code = "system.permission",
                            Component = "views/documentation/index",
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5405),
                            CreatorId = 0L,
                            Icon = "list",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5406),
                            Name = "菜单管理",
                            ParentId = 1L,
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1,
                            Url = "permission"
                        },
                        new
                        {
                            Id = 5L,
                            ApiMethod = "",
                            Code = "system.rolepermission",
                            Component = "views/documentation/index",
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5408),
                            CreatorId = 0L,
                            Icon = "example",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5409),
                            Name = "角色权限",
                            ParentId = 1L,
                            PermissionType = 0,
                            Sort = 0,
                            Status = 1,
                            Url = "rolepermission"
                        });
                });

            modelBuilder.Entity("Revit.Entity.Project.R_Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("图标路径");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("项目介绍");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasComment("最后编辑时间");

                    b.Property<string>("ProjectAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("项目地址");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("项目名称");

                    b.HasKey("Id");

                    b.ToTable("R_Project", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6761),
                            CreatorId = 1L,
                            IconPath = "",
                            Introduction = "",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6759),
                            ProjectAddress = "",
                            ProjectName = "测试1"
                        },
                        new
                        {
                            Id = 2L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6764),
                            CreatorId = 1L,
                            IconPath = "",
                            Introduction = "",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6763),
                            ProjectAddress = "",
                            ProjectName = "测试2"
                        },
                        new
                        {
                            Id = 3L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6767),
                            CreatorId = 1L,
                            IconPath = "",
                            Introduction = "",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6766),
                            ProjectAddress = "",
                            ProjectName = "测试3"
                        },
                        new
                        {
                            Id = 4L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6769),
                            CreatorId = 1L,
                            IconPath = "",
                            Introduction = "",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6768),
                            ProjectAddress = "",
                            ProjectName = "测试4"
                        },
                        new
                        {
                            Id = 5L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6772),
                            CreatorId = 1L,
                            IconPath = "",
                            Introduction = "",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6771),
                            ProjectAddress = "",
                            ProjectName = "测试5"
                        },
                        new
                        {
                            Id = 6L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6774),
                            CreatorId = 1L,
                            IconPath = "",
                            Introduction = "",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6773),
                            ProjectAddress = "",
                            ProjectName = "测试6"
                        });
                });

            modelBuilder.Entity("Revit.Entity.Project.R_ProjectFolder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("后缀名称");

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("文件大小");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("bit")
                        .HasComment("是否为根路径");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasComment("最后编辑时间");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("文件名称无后缀");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasComment("项目Id");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("相对路径");

                    b.HasKey("Id");

                    b.ToTable("R_ProjectFolder", (string)null);
                });

            modelBuilder.Entity("Revit.Entity.Project.R_ProjectUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasComment("最后编辑时间");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasComment("项目Id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasComment("用户Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("R_ProjectUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6534),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6547),
                            ProjectId = 1L,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("Revit.Entity.Roles.R_Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasComment("最后编辑时间");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("备注");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("状态，0：禁用，1：正常");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("R_Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6802),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6800),
                            Name = "管理员",
                            NormalizedName = "管理员",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Revit.Entity.Roles.R_RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("R_RoleClaim", (string)null);
                });

            modelBuilder.Entity("Revit.Entity.Roles.R_RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasComment("最后编辑时间");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("R_RolePermission");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5467),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5468),
                            PermissionId = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5472),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5472),
                            PermissionId = 2L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5474),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5474),
                            PermissionId = 3L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5475),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5476),
                            PermissionId = 4L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5477),
                            CreatorId = 0L,
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 916, DateTimeKind.Local).AddTicks(5477),
                            PermissionId = 5L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Revit.Entity.Users.R_User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasComment("创建时间");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasComment("创建者Id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasComment("最后编辑时间");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("R_User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebd3fbc8-e5c1-44da-b6bd-3a0a6f4087fa",
                            CreationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6921),
                            CreatorId = 0L,
                            Email = "admin@R_tric.com",
                            EmailConfirmed = true,
                            FullName = "管理员",
                            LastModificationTime = new DateTime(2024, 3, 26, 22, 32, 34, 818, DateTimeKind.Local).AddTicks(6874),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@R_TRIC.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKQQDJhml7E+FsUnNSsKicwrn3xoJo2vU2ce096xCweHm5GYnOIus/nqNhmkoqtw/w==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abc",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Revit.Entity.Users.R_UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("R_UserClaim", (string)null);
                });

            modelBuilder.Entity("Revit.Entity.Users.R_UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("R_UserLogin", (string)null);
                });

            modelBuilder.Entity("Revit.Entity.Users.R_UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("R_UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Revit.Entity.Users.R_UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("R_UserToken", (string)null);
                });

            modelBuilder.Entity("Revit.Entity.Project.R_ProjectUser", b =>
                {
                    b.HasOne("Revit.Entity.Project.R_Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Revit.Entity.Users.R_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Revit.Entity.Roles.R_RoleClaim", b =>
                {
                    b.HasOne("Revit.Entity.Roles.R_Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Revit.Entity.Roles.R_RolePermission", b =>
                {
                    b.HasOne("Revit.Entity.Permissions.R_Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Revit.Entity.Roles.R_Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Revit.Entity.Users.R_UserClaim", b =>
                {
                    b.HasOne("Revit.Entity.Users.R_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Revit.Entity.Users.R_UserLogin", b =>
                {
                    b.HasOne("Revit.Entity.Users.R_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Revit.Entity.Users.R_UserRole", b =>
                {
                    b.HasOne("Revit.Entity.Roles.R_Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Revit.Entity.Users.R_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Revit.Entity.Users.R_UserToken", b =>
                {
                    b.HasOne("Revit.Entity.Users.R_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
